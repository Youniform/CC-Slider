{"ast":null,"code":"var _jsxFileName = \"/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Grid.js\";\nimport React from 'react';\nimport Tile from './Tile';\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    Grid.instance = this;\n    this.cells = [{\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: 2,\n      y: 0\n    }, {\n      x: 3,\n      y: 0\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }, {\n      x: 2,\n      y: 1\n    }, {\n      x: 3,\n      y: 1\n    }, {\n      x: 0,\n      y: 2\n    }, {\n      x: 1,\n      y: 2\n    }, {\n      x: 2,\n      y: 2\n    }, {\n      x: 3,\n      y: 2\n    }, {\n      x: 0,\n      y: 3\n    }, {\n      x: 1,\n      y: 3\n    }, {\n      x: 2,\n      y: 3\n    }, {\n      x: 3,\n      y: 3\n    }];\n  }\n\n  buttonShuffle(cell) {\n    const tiles = [];\n\n    for (let [index, cell] of this.cells.entries()) {\n      if (index === this.cells.length - 1) break;\n      tiles.push( /*#__PURE__*/React.createElement(Tile, {\n        key: index,\n        destination: cell,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }\n      }));\n    }\n  }\n\n  render() {\n    const tiles = [];\n\n    for (let [index, cell] of this.cells.entries()) {\n      if (index === this.cells.length - 1) break;\n      tiles.push( /*#__PURE__*/React.createElement(Tile, {\n        key: index,\n        destination: cell,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 4\n      }\n    }, tiles), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"shuffle-button\",\n      onClick: () => this.buttonShuffle(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 4\n      }\n    }, \" Shuffle Pieces \"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"winning-formation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 4\n      }\n    }, \" Winning Formation \"));\n  }\n\n  componentDidMount() {\n    let cells = this.cells.slice();\n\n    for (let tile of Tile.instances) {\n      const cellIndex = Math.floor(Math.random() * cells.length);\n      tile.setState(cells.splice(cellIndex, 1)[0]);\n    }\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Grid.js"],"names":["React","Tile","Grid","Component","constructor","props","instance","cells","x","y","buttonShuffle","cell","tiles","index","entries","length","push","render","componentDidMount","slice","tile","instances","cellIndex","Math","floor","random","setState","splice"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tile from './Tile';\n\nclass Grid extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tGrid.instance = this;\n\n\t\tthis.cells = [\n\t\t\t{ x: 0, y: 0 },\n\t\t\t{ x: 1, y: 0 },\n\t\t\t{ x: 2, y: 0 },\n\t\t\t{ x: 3, y: 0 },\n\n\t\t\t{ x: 0, y: 1 },\n\t\t\t{ x: 1, y: 1 },\n\t\t\t{ x: 2, y: 1 },\n\t\t\t{ x: 3, y: 1 },\n\n\t\t\t{ x: 0, y: 2 },\n\t\t\t{ x: 1, y: 2 },\n\t\t\t{ x: 2, y: 2 },\n\t\t\t{ x: 3, y: 2 },\n\n\t\t\t{ x: 0, y: 3 },\n\t\t\t{ x: 1, y: 3 },\n\t\t\t{ x: 2, y: 3 },\n\t\t\t{ x: 3, y: 3 }\n\t\t];\n\t}\n\n\tbuttonShuffle(cell) {\n\t\tconst tiles = [];\n\t\tfor (let [index,cell] of this.cells.entries()) {\n\t\t\tif (index === this.cells.length - 1) break;\n\t\t\ttiles.push(<Tile key={index} destination={cell} />);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst tiles = [];\n\t\tfor (let [index,cell] of this.cells.entries()) {\n\t\t\tif (index === this.cells.length - 1) break;\n\t\t\ttiles.push(<Tile key={index} destination={cell} />);\n\t\t}\n\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t<div className=\"grid\">\n\t\t\t\t{tiles}\n\t\t\t</div>\n\t\t\t<button className=\"shuffle-button\" onClick={() => this.buttonShuffle(this)}> Shuffle Pieces </button>\n\t\t\t<button className=\"winning-formation\"> Winning Formation </button>\n\t\t\t</div>\n\t\t\t);\n\t}\n\n\tcomponentDidMount()\n\t{\n\n\t\tlet cells = this.cells.slice();\n\t\tfor (let tile of Tile.instances) {\n\t\t\tconst cellIndex = Math.floor(Math.random() * cells.length);\n\t\t\ttile.setState(cells.splice(cellIndex, 1)[0]);\n\t\t}\n\t}\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}