{"ast":null,"code":"var _jsxFileName = \"/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Grid.js\";\nimport React from 'react';\nimport Tile from './Tile';\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    Grid.instance = this;\n    this.cells = [{\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: 2,\n      y: 0\n    }, {\n      x: 3,\n      y: 0\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }, {\n      x: 2,\n      y: 1\n    }, {\n      x: 3,\n      y: 1\n    }, {\n      x: 0,\n      y: 2\n    }, {\n      x: 1,\n      y: 2\n    }, {\n      x: 2,\n      y: 2\n    }, {\n      x: 3,\n      y: 2\n    }, {\n      x: 0,\n      y: 3\n    }, {\n      x: 1,\n      y: 3\n    }, {\n      x: 2,\n      y: 3\n    }, {\n      x: 3,\n      y: 3\n    }];\n    this.state = {\n      autosolved: false\n    };\n  }\n\n  render() {\n    const tiles = [];\n\n    for (let [index, cell] of this.cells.entries()) {\n      if (index === this.cells.length - 1) break;\n      tiles.push( /*#__PURE__*/React.createElement(Tile, {\n        key: index,\n        destination: cell,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, tiles), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.autoSolve(),\n      type: \"button\",\n      id: \"autosolve-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      id: \"solve-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 83\n      }\n    }, \"Auto Solve\"), /*#__PURE__*/React.createElement(\"span\", {\n      id: \"solve-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 121\n      }\n    }, \"CHEATER\")));\n  }\n\n  componentDidMount() {\n    let cells = this.cells.slice();\n\n    for (let tile of Tile.instances) {\n      const cellIndex = Math.floor(Math.random() * cells.length);\n      tile.setState(cells.splice(cellIndex, 1)[0]);\n    }\n  }\n\n  autoSolve() {\n    let cells = this.cells.slice();\n\n    for (let [index, tile] of Tile.instances) {\n      const cellIndex = index;\n      tile.setState(cells.splice(cellIndex, 1)[0]);\n      return tileArray;\n    }\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Grid.js"],"names":["React","Tile","Grid","Component","constructor","props","instance","cells","x","y","state","autosolved","render","tiles","index","cell","entries","length","push","autoSolve","componentDidMount","slice","tile","instances","cellIndex","Math","floor","random","setState","splice","tileArray"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tile from './Tile';\n\nclass Grid extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tGrid.instance = this;\n\n\t\tthis.cells = [\n\t\t\t{ x: 0, y: 0 },\n\t\t\t{ x: 1, y: 0 },\n\t\t\t{ x: 2, y: 0 },\n\t\t\t{ x: 3, y: 0 },\n\n\t\t\t{ x: 0, y: 1 },\n\t\t\t{ x: 1, y: 1 },\n\t\t\t{ x: 2, y: 1 },\n\t\t\t{ x: 3, y: 1 },\n\n\t\t\t{ x: 0, y: 2 },\n\t\t\t{ x: 1, y: 2 },\n\t\t\t{ x: 2, y: 2 },\n\t\t\t{ x: 3, y: 2 },\n\n\t\t\t{ x: 0, y: 3 },\n\t\t\t{ x: 1, y: 3 },\n\t\t\t{ x: 2, y: 3 },\n\t\t\t{ x: 3, y: 3 }\n\t\t];\n\t\tthis.state = {\n\t\t\tautosolved : false\n\t\t}\n\t}\n\n\trender() {\n\t\tconst tiles = [];\n\t\tfor (let [index,cell] of this.cells.entries()) {\n\t\t\tif (index === this.cells.length - 1) break;\n\t\t\ttiles.push(<Tile key={index} destination={cell} />);\n\t\t}\n\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{tiles}\n\t\t\t\t</div>\n\t\t\t\t<button onClick={ () => this.autoSolve()} type=\"button\" id=\"autosolve-button\"><span id=\"solve-top\">Auto Solve</span><span id=\"solve-bottom\">CHEATER</span></button>\n\t\t\t</div>\n\t\t\t);\n\t}\n\n\tcomponentDidMount()\n\t{\n\n\t\tlet cells = this.cells.slice();\n\t\tfor (let tile of Tile.instances) {\n\t\t\tconst cellIndex = Math.floor(Math.random() * cells.length);\n\t\t\ttile.setState(cells.splice(cellIndex, 1)[0]);\n\t\t}\n\t}\n\n\tautoSolve() \n\t{\n\t\tlet cells = this.cells.slice();\n\t\tfor (let [index,tile] of Tile.instances) {\n\t\tconst cellIndex = index;\n\t\ttile.setState(cells.splice(cellIndex, 1)[0]);\n\n\t\treturn tileArray;\n\t\t}\n\t}\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}