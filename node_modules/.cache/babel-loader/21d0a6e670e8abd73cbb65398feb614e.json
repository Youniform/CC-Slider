{"ast":null,"code":"var _jsxFileName = \"/home/b/Downloads/puzzle-test/slider-bak/src/components/Grid.js\";\nimport Tile from './Tile';\nimport React from 'react';\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    Grid.instance = this;\n    this.cells = [{\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: 2,\n      y: 0\n    }, {\n      x: 3,\n      y: 0\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }, {\n      x: 2,\n      y: 1\n    }, {\n      x: 3,\n      y: 1\n    }, {\n      x: 0,\n      y: 2\n    }, {\n      x: 1,\n      y: 2\n    }, {\n      x: 2,\n      y: 2\n    }, {\n      x: 3,\n      y: 2\n    }, {\n      x: 0,\n      y: 3\n    }, {\n      x: 1,\n      y: 3\n    }, {\n      x: 2,\n      y: 3\n    }, {\n      x: 3,\n      y: 3\n    }];\n    this.state = {};\n  }\n\n  render() {\n    const tiles = [];\n\n    for (let [index, cell] of this.cells.entries()) {\n      if (index === this.cells.length - 1) break;\n      tiles.push( /*#__PURE__*/React.createElement(Tile, {\n        key: index,\n        destination: cell,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }\n    }, tiles));\n  }\n\n  componentDidMount() {\n    let cells = this.cells.slice();\n    let unchanged = this.cells;\n    let indexCounter = 0;\n\n    for (let tile of Tile.instances) {\n      const cellIndex = Math.floor(Math.random() * cells.length);\n      const newTile = unchanged.splice(cellIndex, 1)[0];\n      tile.setState(cells.splice(newTile, 1)[0]);\n      console.log(newTile); //tile.setState(cells.splice(cellIndex, 1)[0]);\n    }\n\n    indexCounter++;\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/home/b/Downloads/puzzle-test/slider-bak/src/components/Grid.js"],"names":["Tile","React","Grid","Component","constructor","props","instance","cells","x","y","state","render","tiles","index","cell","entries","length","push","componentDidMount","slice","unchanged","indexCounter","tile","instances","cellIndex","Math","floor","random","newTile","splice","setState","console","log"],"mappings":"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","sourcesContent":["import Tile from './Tile';\nimport React from 'react';\n\nclass Grid extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tGrid.instance = this;\n\n\t\tthis.cells = [\n\t\t\t{ x: 0, y: 0 },\n\t\t\t{ x: 1, y: 0 },\n\t\t\t{ x: 2, y: 0 },\n\t\t\t{ x: 3, y: 0 },\n\n\t\t\t{ x: 0, y: 1 },\n\t\t\t{ x: 1, y: 1 },\n\t\t\t{ x: 2, y: 1 },\n\t\t\t{ x: 3, y: 1 },\n\n\t\t\t{ x: 0, y: 2 },\n\t\t\t{ x: 1, y: 2 },\n\t\t\t{ x: 2, y: 2 },\n\t\t\t{ x: 3, y: 2 },\n\n\t\t\t{ x: 0, y: 3 },\n\t\t\t{ x: 1, y: 3 },\n\t\t\t{ x: 2, y: 3 },\n\t\t\t{ x: 3, y: 3 }\n\t\t];\n\t\tthis.state = {\t}\n\t}\n\n\trender() {\n\t\tconst tiles = [];\n\t\tfor (let [index,cell] of this.cells.entries()) {\n\t\t\tif (index === this.cells.length - 1) break;\n\t\t\ttiles.push(<Tile key={index} destination={cell} />);\n\t\t}\n\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{tiles}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t);\n\t}\n\n\tcomponentDidMount()\n\t{\n\n\t\tlet cells = this.cells.slice();\n\t\tlet unchanged = this.cells;\n\t\tlet indexCounter = 0;\n\t\tfor (let tile of Tile.instances) {\n\t\t\t\tconst cellIndex = Math.floor(Math.random() * cells.length);\n\t\t\t\tconst newTile = unchanged.splice(cellIndex, 1)[0];\n\t\t\t\ttile.setState(cells.splice(newTile, 1)[0]);\n\t\t\t\tconsole.log(newTile);\n\t\t\t\t//tile.setState(cells.splice(cellIndex, 1)[0]);\n\t\t\t}\n\t\tindexCounter++;\n\t}\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}