{"ast":null,"code":"var _jsxFileName = \"/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Tile.js\";\nimport React from \"react\";\nimport \"./Tile.css\";\nimport Piece from \"./Piece\";\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.x = props.x;\n    this.y = props.y;\n    this.label = props.label;\n    this.null = props.null;\n    this.number = props.number;\n    this.order = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    this.everdayImShufflin = this.shuffle(this.order);\n    Tile.instances.push(this);\n    this.state = {\n      y: this.y,\n      x: this.x\n    };\n  } // Shuffle using Fisher-Yates Algorithm\n\n\n  shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n\n    return a;\n  }\n\n  render() {\n    const top = `${this.state.y * Tile.size}px`;\n    const left = `${this.state.x * Tile.size}px`;\n    const height = `${Tile.size}px`;\n    const width = `${Tile.size}px`;\n\n    if (Grid.instance.theVoid === this.number) {\n      return \"\";\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tile\",\n        \"data-label\": this.label,\n        style: {\n          top,\n          left,\n          height,\n          width\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(Piece, {\n        number: this.everdayImShufflin[this.number],\n        tile: this.number,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }\n      }));\n    }\n  }\n\n}\n\nTile.instances = [];\nTile.size = 100;\nexport default Tile;","map":{"version":3,"sources":["/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Tile.js"],"names":["React","Piece","Tile","Component","constructor","props","x","y","label","null","number","order","everdayImShufflin","shuffle","instances","push","state","a","i","length","j","Math","floor","random","render","top","size","left","height","width","Grid","instance","theVoid"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAGA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA,SAAKC,CAAL,GAASD,KAAK,CAACC,CAAf;AACA,SAAKC,CAAL,GAASF,KAAK,CAACE,CAAf;AACA,SAAKC,KAAL,GAAaH,KAAK,CAACG,KAAnB;AACA,SAAKC,IAAL,GAAYJ,KAAK,CAACI,IAAlB;AACA,SAAKC,MAAL,GAAcL,KAAK,CAACK,MAApB;AACA,SAAKC,KAAL,GAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD,CAAb;AACA,SAAKC,iBAAL,GAAyB,KAAKC,OAAL,CAAa,KAAKF,KAAlB,CAAzB;AACAT,IAAAA,IAAI,CAACY,SAAL,CAAeC,IAAf,CAAoB,IAApB;AACA,SAAKC,KAAL,GAAa;AACZT,MAAAA,CAAC,EAAE,KAAKA,CADI;AAEZD,MAAAA,CAAC,EAAE,KAAKA;AAFI,KAAb;AAIA,GAfiC,CAkBlC;;;AACAO,EAAAA,OAAO,CAACI,CAAD,EAAI;AACP,SAAK,IAAIC,CAAC,GAAGD,CAAC,CAACE,MAAF,GAAW,CAAxB,EAA2BD,CAAC,GAAG,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACnC,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,OAACD,CAAC,CAACC,CAAD,CAAF,EAAOD,CAAC,CAACG,CAAD,CAAR,IAAe,CAACH,CAAC,CAACG,CAAD,CAAF,EAAOH,CAAC,CAACC,CAAD,CAAR,CAAf;AACH;;AACD,WAAOD,CAAP;AACH;;AAGDO,EAAAA,MAAM,GAAG;AACR,UAAMC,GAAG,GAAI,GAAE,KAAKT,KAAL,CAAWT,CAAX,GAAeL,IAAI,CAACwB,IAAK,IAAxC;AACG,UAAMC,IAAI,GAAI,GAAE,KAAKX,KAAL,CAAWV,CAAX,GAAeJ,IAAI,CAACwB,IAAK,IAAzC;AACA,UAAME,MAAM,GAAI,GAAE1B,IAAI,CAACwB,IAAK,IAA5B;AACA,UAAMG,KAAK,GAAI,GAAE3B,IAAI,CAACwB,IAAK,IAA3B;;AACA,QAAII,IAAI,CAACC,QAAL,CAAcC,OAAd,KAA0B,KAAKtB,MAAnC,EAA2C;AAC1C,aAAO,EAAP;AACA,KAFD,MAGK;AAEP,0BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,sBAAY,KAAKF,KAAvC;AAA8C,QAAA,KAAK,EAAE;AAACiB,UAAAA,GAAD;AAAME,UAAAA,IAAN;AAAYC,UAAAA,MAAZ;AAAoBC,UAAAA;AAApB,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAE,KAAKjB,iBAAL,CAAuB,KAAKF,MAA5B,CAAf;AAAoD,QAAA,IAAI,EAAE,KAAKA,MAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADF;AAKA;AACD;;AA5CiC;;AA8CnCR,IAAI,CAACY,SAAL,GAAiB,EAAjB;AACAZ,IAAI,CAACwB,IAAL,GAAY,GAAZ;AAEA,eAAexB,IAAf","sourcesContent":["import React from \"react\";\nimport \"./Tile.css\";\nimport Piece from \"./Piece\";\n\n\nclass Tile extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.x = props.x;\n\t\tthis.y = props.y; \n\t\tthis.label = props.label;\n\t\tthis.null = props.null;\n\t\tthis.number = props.number;\n\t\tthis.order = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\t\tthis.everdayImShufflin = this.shuffle(this.order);\n\t\tTile.instances.push(this);\n\t\tthis.state = {\n\t\t\ty: this.y,\n\t\t\tx: this.x\n\t\t}\n\t}\n\n\n\t// Shuffle using Fisher-Yates Algorithm\n\tshuffle(a) {\n    \tfor (let i = a.length - 1; i > 0; i--) {\n       \t\tconst j = Math.floor(Math.random() * (i + 1));\n       \t\t[a[i], a[j]] = [a[j], a[i]];\n    \t}\n    \treturn a;\n\t}\n\n\n\trender() {\n\t\tconst top = `${this.state.y * Tile.size}px`;\n   \t\tconst left = `${this.state.x * Tile.size}px`;\n   \t\tconst height = `${Tile.size}px`;\n   \t\tconst width = `${Tile.size}px`;\n   \t\tif (Grid.instance.theVoid === this.number) {\n   \t\t\treturn \"\";\n   \t\t}\n   \t\telse {\n\n\t\t\treturn(\n\t\t\t\t\t<div className=\"tile\" data-label={this.label} style={{top, left, height, width}}>\n\t\t\t\t\t\t<Piece number={this.everdayImShufflin[this.number]} tile={this.number} />\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t}\n\t}\n}\nTile.instances = [];\nTile.size = 100;\n\nexport default Tile;"]},"metadata":{},"sourceType":"module"}