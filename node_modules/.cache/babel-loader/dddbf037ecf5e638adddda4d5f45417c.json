{"ast":null,"code":"var _jsxFileName = \"/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Tile.js\";\nimport React from \"react\";\nimport \"./Tile.css\";\nimport Piece from \"./Piece\";\n\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.x = props.x;\n    this.y = props.y;\n    this.label = props.label;\n    this.null = props.null;\n    this.number = props.number;\n    this.order = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    this.chaos = this.shuffle(this.order);\n    this.piece = props.piece;\n    Tile.instances.push(this);\n    this.state = {\n      y: this.y,\n      x: this.x,\n      piece: this.piece\n    };\n  } // Shuffle using Fisher-Yates Algorithm\n\n\n  shuffle(array) {\n    let counter = array.length;\n\n    while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n    }\n\n    return array;\n  }\n\n  render() {\n    const top = `${this.state.y * Tile.size}px`;\n    const left = `${this.state.x * Tile.size}px`;\n    const height = `${Tile.size}px`;\n    const width = `${Tile.size}px`;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tile\",\n      \"data-label\": this.label,\n      style: {\n        top,\n        left,\n        height,\n        width\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Piece, {\n      number: this.chaos[Tile.number],\n      tile: this.number,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nTile.instances = [];\nTile.size = 100;\nexport default Tile;","map":{"version":3,"sources":["/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Tile.js"],"names":["React","Piece","Tile","Component","constructor","props","x","y","label","null","number","order","chaos","shuffle","piece","instances","push","state","array","counter","length","index","Math","floor","random","temp","render","top","size","left","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAGA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA,SAAKC,CAAL,GAASD,KAAK,CAACC,CAAf;AACA,SAAKC,CAAL,GAASF,KAAK,CAACE,CAAf;AACA,SAAKC,KAAL,GAAaH,KAAK,CAACG,KAAnB;AACA,SAAKC,IAAL,GAAYJ,KAAK,CAACI,IAAlB;AACA,SAAKC,MAAL,GAAcL,KAAK,CAACK,MAApB;AACA,SAAKC,KAAL,GAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD,CAAb;AACA,SAAKC,KAAL,GAAa,KAAKC,OAAL,CAAa,KAAKF,KAAlB,CAAb;AACA,SAAKG,KAAL,GAAaT,KAAK,CAACS,KAAnB;AACAZ,IAAAA,IAAI,CAACa,SAAL,CAAeC,IAAf,CAAoB,IAApB;AACA,SAAKC,KAAL,GAAa;AACZV,MAAAA,CAAC,EAAE,KAAKA,CADI;AAEZD,MAAAA,CAAC,EAAE,KAAKA,CAFI;AAGZQ,MAAAA,KAAK,EAAE,KAAKA;AAHA,KAAb;AAKA,GAjBiC,CAoBlC;;;AACAD,EAAAA,OAAO,CAACK,KAAD,EAAQ;AACd,QAAIC,OAAO,GAAGD,KAAK,CAACE,MAApB;;AACA,WAAOD,OAAO,GAAG,CAAjB,EAAoB;AACnB,UAAIE,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,OAA3B,CAAZ;AACAA,MAAAA,OAAO;AACP,UAAIM,IAAI,GAAGP,KAAK,CAACC,OAAD,CAAhB;AACAD,MAAAA,KAAK,CAACC,OAAD,CAAL,GAAiBD,KAAK,CAACG,KAAD,CAAtB;AACAH,MAAAA,KAAK,CAACG,KAAD,CAAL,GAAeI,IAAf;AACA;;AACD,WAAOP,KAAP;AACA;;AAGDQ,EAAAA,MAAM,GAAG;AACR,UAAMC,GAAG,GAAI,GAAE,KAAKV,KAAL,CAAWV,CAAX,GAAeL,IAAI,CAAC0B,IAAK,IAAxC;AACG,UAAMC,IAAI,GAAI,GAAE,KAAKZ,KAAL,CAAWX,CAAX,GAAeJ,IAAI,CAAC0B,IAAK,IAAzC;AACA,UAAME,MAAM,GAAI,GAAE5B,IAAI,CAAC0B,IAAK,IAA5B;AACA,UAAMG,KAAK,GAAI,GAAE7B,IAAI,CAAC0B,IAAK,IAA3B;AACH,wBACC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,oBAAY,KAAKpB,KAAvC;AAA8C,MAAA,KAAK,EAAE;AAACmB,QAAAA,GAAD;AAAME,QAAAA,IAAN;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA;AAApB,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAE,KAAKnB,KAAL,CAAWV,IAAI,CAACQ,MAAhB,CAAf;AAAwC,MAAA,IAAI,EAAE,KAAKA,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD;AAKA;;AA5CiC;;AA+CnCR,IAAI,CAACa,SAAL,GAAiB,EAAjB;AACAb,IAAI,CAAC0B,IAAL,GAAY,GAAZ;AAEA,eAAe1B,IAAf","sourcesContent":["import React from \"react\";\nimport \"./Tile.css\";\nimport Piece from \"./Piece\";\n\n\nclass Tile extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.x = props.x;\n\t\tthis.y = props.y; \n\t\tthis.label = props.label;\n\t\tthis.null = props.null;\n\t\tthis.number = props.number;\n\t\tthis.order = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\t\tthis.chaos = this.shuffle(this.order);\n\t\tthis.piece = props.piece;\n\t\tTile.instances.push(this);\n\t\tthis.state = {\n\t\t\ty: this.y,\n\t\t\tx: this.x,\n\t\t\tpiece: this.piece\n\t\t}\n\t}\n\n\n\t// Shuffle using Fisher-Yates Algorithm\n\tshuffle(array) {\n\t\tlet counter = array.length;\n\t\twhile (counter > 0) {\n\t\t\tlet index = Math.floor(Math.random() * counter);\n\t\t\tcounter--;\n\t\t\tlet temp = array[counter];\n\t\t\tarray[counter] = array[index];\n\t\t\tarray[index] = temp;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\trender() {\n\t\tconst top = `${this.state.y * Tile.size}px`;\n   \t\tconst left = `${this.state.x * Tile.size}px`;\n   \t\tconst height = `${Tile.size}px`;\n   \t\tconst width = `${Tile.size}px`;\n\t\treturn(\n\t\t\t<div className=\"tile\" data-label={this.label} style={{top, left, height, width}}>\n\t\t\t\t<Piece number={this.chaos[Tile.number]} tile={this.number} />\n\t\t\t</div>\n\t\t\t);\n\t}\n\n}\nTile.instances = [];\nTile.size = 100;\n\nexport default Tile;"]},"metadata":{},"sourceType":"module"}