{"ast":null,"code":"var _jsxFileName = \"/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Piece.js\";\nimport React from \"react\";\nimport \"./Piece.css\";\n\nclass Piece extends React.Component {\n  constructor(props) {\n    super(props);\n    this.number = props.number;\n    this.position = props.position;\n    this.state = {\n      position: this.position\n    };\n  }\n\n  checkRules(e) {\n    let target = e.target;\n    console.log(\"proc'ing target\");\n    console.log(target); // We'll be needing to find out where on the map the null or 0 tile is\n    // so maybe an indexOf to find the position of 0 in the array, count 4, each is a row\n\n    /**\n    * Besides the directly touching neighbors if you just +/- 4 from the 0 elements position \n    * value, you'll get the position of it's vertical neighbor, derp \n    */\n\n    this.isMovable();\n  }\n\n  render() {\n    let theId = \"_\" + this.number;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"piece\",\n      onClick: e => this.checkRules(e),\n      draggable: \"true\",\n      \"data-number\": this.number,\n      id: theId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, this.number));\n  }\n\n}\n\nexport default Piece;","map":{"version":3,"sources":["/home/b/Downloads/puzzle-test/slider-puzzle-question-master/src/components/Piece.js"],"names":["React","Piece","Component","constructor","props","number","position","state","checkRules","e","target","console","log","isMovable","render","theId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcD,KAAK,CAACC,MAApB;AACA,SAAKC,QAAL,GAAgBF,KAAK,CAACE,QAAtB;AACA,SAAKC,KAAL,GAAa;AACZD,MAAAA,QAAQ,EAAE,KAAKA;AADH,KAAb;AAGA;;AAEDE,EAAAA,UAAU,CAACC,CAAD,EAAI;AACb,QAAIC,MAAM,GAAGD,CAAC,CAACC,MAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAHa,CAKb;AACA;;AACA;;;;;AAIA,SAAKG,SAAL;AACA;;AAEDC,EAAAA,MAAM,GAAG;AACR,QAAIC,KAAK,GAAG,MAAM,KAAKV,MAAvB;AACA,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,OAAO,EAAGI,CAAD,IAAO,KAAKD,UAAL,CAAgBC,CAAhB,CAAvC;AAA4D,MAAA,SAAS,EAAC,MAAtE;AAA6E,qBAAa,KAAKJ,MAA/F;AAAuG,MAAA,EAAE,EAAEU,KAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKV,MADN,CADD,CADD;AAOA;;AAjCkC;;AAoCpC,eAAeJ,KAAf","sourcesContent":["import React from \"react\";\nimport \"./Piece.css\";\n\nclass Piece extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.number = props.number;\n\t\tthis.position = props.position;\n\t\tthis.state = {\n\t\t\tposition: this.position\n\t\t}\n\t}\n\n\tcheckRules(e) {\n\t\tlet target = e.target;\n\t\tconsole.log(\"proc'ing target\");\n\t\tconsole.log(target);\n\n\t\t// We'll be needing to find out where on the map the null or 0 tile is\n\t\t// so maybe an indexOf to find the position of 0 in the array, count 4, each is a row\n\t\t/**\n\t\t* Besides the directly touching neighbors if you just +/- 4 from the 0 elements position \n\t\t* value, you'll get the position of it's vertical neighbor, derp \n\t\t*/\n\t\tthis.isMovable();\n\t}\n\n\trender() {\n\t\tlet theId = \"_\" + this.number;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"piece\" onClick={(e) => this.checkRules(e) } draggable=\"true\" data-number={this.number} id={theId}>\n\t\t\t\t{this.number}\n\t\t\t\t</div>\n\t\t\t</div> );\n\t\t\t\n\t}\n}\n\nexport default Piece;"]},"metadata":{},"sourceType":"module"}